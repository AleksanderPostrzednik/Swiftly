Plik: src\main\java\com\swiftly\swiftly\controller\HomeController.java
package com.swiftly.swiftly.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HomeController {

    @GetMapping("/")
    public String home() {
        return "Witaj w aplikacji Swiftly! SprawdĹş dokumentacjÄ™ API pod /swagger-ui.html lub podobnym endpointem.";
    }
}
======================
Plik: src\main\java\com\swiftly\swiftly\controller\SwiftCodeController.java
package com.swiftly.swiftly.controller;

import com.swiftly.swiftly.model.SwiftCode;
import com.swiftly.swiftly.service.ExcelParserService;
import com.swiftly.swiftly.service.SwiftCodeService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/v1/swift-codes")
public class SwiftCodeController {

    private final SwiftCodeService swiftCodeService;
    private final ExcelParserService excelParserService;

    public SwiftCodeController(SwiftCodeService swiftCodeService,
                               ExcelParserService excelParserService) {
        this.swiftCodeService = swiftCodeService;
        this.excelParserService = excelParserService;
    }

    @PostMapping("/import")
    public ResponseEntity<?> importSwiftCodes(@RequestParam("file") MultipartFile file) {
        try (InputStream is = file.getInputStream()) {
            excelParserService.parseAndSave(is);
            return ResponseEntity.ok(Map.of("message", "File imported successfully"));
        } catch (IOException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(Map.of("error", "Cannot parse Excel file: " + e.getMessage()));
        }
    }

    @GetMapping("/{swiftCode}")
    public ResponseEntity<?> getSwiftCode(@PathVariable String swiftCode) {
        SwiftCode code = swiftCodeService.getBySwiftCode(swiftCode);
        if (code == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(Map.of("error", "SWIFT code not found"));
        }

        if (code.isHeadquarter()) {

            List<SwiftCode> branches = swiftCodeService.getBranchesForHQ(swiftCode);

            Map<String, Object> response = new HashMap<>();
            response.put("address", code.getAddress());
            response.put("bankName", code.getBankName());
            response.put("countryISO2", code.getCountryISO2());
            response.put("countryName", code.getCountryName());
            response.put("isHeadquarter", true);
            response.put("swiftCode", code.getSwiftCode());

            List<Map<String, Object>> branchList = branches.stream().map(b -> {
                Map<String, Object> m = new HashMap<>();
                m.put("address", b.getAddress());
                m.put("bankName", b.getBankName());
                m.put("countryISO2", b.getCountryISO2());
                m.put("isHeadquarter", b.isHeadquarter());
                m.put("swiftCode", b.getSwiftCode());
                return m;
            }).toList();

            response.put("branches", branchList);

            return ResponseEntity.ok(response);
        } else {
            Map<String, Object> response = new HashMap<>();
            response.put("address", code.getAddress());
            response.put("bankName", code.getBankName());
            response.put("countryISO2", code.getCountryISO2());
            response.put("countryName", code.getCountryName());
            response.put("isHeadquarter", false);
            response.put("swiftCode", code.getSwiftCode());
            return ResponseEntity.ok(response);
        }
    }

    @GetMapping("/country/{iso2}")
    public ResponseEntity<?> getAllCodesForCountry(@PathVariable String iso2) {
        List<SwiftCode> list = swiftCodeService.getAllForCountry(iso2);
        if (list.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(Map.of("error", "No SWIFT codes found for country " + iso2));
        }

        String countryName = list.get(0).getCountryName();

        Map<String, Object> response = new HashMap<>();
        response.put("countryISO2", iso2.toUpperCase());
        response.put("countryName", countryName);

        List<Map<String, Object>> swiftCodesList = list.stream().map(code -> {
            Map<String, Object> m = new HashMap<>();
            m.put("address", code.getAddress());
            m.put("bankName", code.getBankName());
            m.put("countryISO2", code.getCountryISO2());
            m.put("isHeadquarter", code.isHeadquarter());
            m.put("swiftCode", code.getSwiftCode());
            return m;
        }).toList();

        response.put("swiftCodes", swiftCodesList);
        return ResponseEntity.ok(response);
    }

    // POST /v1/swift-codes
    @PostMapping
    public ResponseEntity<?> createSwiftCode(@RequestBody SwiftCode body) {
        SwiftCode saved = null;
        try {
            saved = swiftCodeService.createSwiftCode(body);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.CONFLICT)
                    .body(Map.of("error", e.getMessage()));
        }

        return ResponseEntity.ok(Map.of("message", "SWIFT code added successfully",
                "swiftCode", saved.getSwiftCode()));
    }

    // DELETE /v1/swift-codes/{swift-code}
    @DeleteMapping("/{swiftCode}")
    public ResponseEntity<?> deleteSwiftCode(@PathVariable String swiftCode) {
        try {
            swiftCodeService.deleteBySwiftCode(swiftCode);
            return ResponseEntity.ok(Map.of("message",
                    "SWIFT code " + swiftCode + " has been deleted."));
        } catch (RuntimeException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(Map.of("error", e.getMessage()));
        }
    }
}
======================
